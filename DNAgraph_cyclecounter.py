#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb  7 09:55:33 2025

@author: jessicasorrells
"""
import numpy as np
from sympy import *
import copy

def count_cycles(matrix,d):
    A = Matrix(matrix)
    A_array = np.array(matrix)
    no_edges = int(A_array.sum()/2)
    A2 = A**2
    A3 = A**3
    A4 = A**4
    A5 = A**5
    A2_array = np.array(A2)
    val = A2_array.sum()-A2.trace()
    A3_trace = A3.trace()
    A4_trace = A4.trace()
    A5_trace = A5.trace()
    count_list = []
    no_3cycles = A3_trace/6
    no_4cycles = (A4_trace-2*no_edges-2*val)/8
    no_5cycles = (A5_trace+5*A3_trace-5*d*A3_trace)/10
    count_list.extend([no_3cycles,no_4cycles,no_5cycles])
    return count_list

## INPUT:
## Adjacency matrix of k-regular graph, as an array:
# M = []
## Degree of vertices:
# d = k

## Truncated tetrahedron:
M=[[0,1,1,0,0,0,1,0,0,0,0,0],
[1,0,1,0,0,0,0,0,0,0,1,0],
[1,1,0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,1,1,0,0,0,0,0,0],
[0,0,0,1,0,1,0,1,0,0,0,0],
[0,0,0,1,1,0,0,0,0,1,0,0],
[1,0,0,0,0,0,0,1,1,0,0,0],
[0,0,0,0,1,0,1,0,1,0,0,0],
[0,0,0,0,0,0,1,1,0,0,0,1],
[0,0,0,0,0,1,0,0,0,0,1,1],
[0,1,0,0,0,0,0,0,0,1,0,1],
[0,0,0,0,0,0,0,0,1,1,1,0]]
d=3

## Cuboctahedron:
# M = [[0,1,1,1,1,0,0,0,0,0,0,0],
#           [1,0,1,0,0,1,0,0,0,1,0,0],
#           [1,1,0,0,0,0,1,0,0,0,1,0],
#           [1,0,0,0,1,1,0,1,0,0,0,0],
#           [1,0,0,1,0,0,1,0,1,0,0,0],
#           [0,1,0,1,0,0,0,1,0,1,0,0],
#           [0,0,1,0,1,0,0,0,1,0,1,0],
#           [0,0,0,1,0,1,0,0,1,0,0,1],
#           [0,0,0,0,1,0,1,1,0,0,0,1],
#           [0,1,0,0,0,1,0,0,0,0,1,1],
#           [0,0,1,0,0,0,1,0,0,1,0,1],
#           [0,0,0,0,0,0,0,1,1,1,1,0]]
# d=4

# # Truncated Octahedron:
# M = [[0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
# [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
# [1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
# [0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1],
# [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
# [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0]]
# d=3

## Truncated Cube:
# M=[[0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
# [1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
# [0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0],
# [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1],
# [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0]]
# d=3

## Small Rhombicuboctahedron:
# M = [[0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
# [1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
# [1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0],
# [0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
# [0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0],
# [0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0],
# [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1],
# [1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1],
# [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0]]
# d=4

# Snub Cube:
# M = [[0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
# [1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],
# [1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0],
# [0,0,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0],
# [0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0],
# [0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0],
# [0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1],
# [0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0],
# [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1],
# [1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1],
# [0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0]]
# d=5

## Compute number of vertices and complete list of oriented edges from adjacency matrix:
V = len(M[0])
edge_list = []
for i in range(0,V):
    for j in range(0,V):
        if M[i][j] == 1:
            edge_list.append([i,j])
            
## Count n-cycles in original graph:
adj_mat = Matrix(M)
cycle_list = count_cycles(adj_mat,d)

## Establish lists to store oriented edges whose swaps alter the number of n-cycles:
threecycle_list = []
fourcycle_list = []
fivecycle_list = []

## INPUT:
## Edge (i,j) initially labeled with bond-edge type:
i=0
j=1

## For each edge in the graph, swap with the initial edge and compute the number of n-cycles in the new graph:
for edge in edge_list:
    graph = copy.deepcopy(M)
    k = int(edge[0])
    l = int(edge[1])
    ## Swap the edges as long as the second edge isn't equal to the first and swap doesn't create a loop:
    if i !=k and j!=l and l != i and k != j:
        graph[i][j] = 0
        graph[j][i] = 0
        graph[k][l] = 0
        graph[l][k] = 0
        graph[i][l] = 1
        graph[l][i] = 1
        graph[j][k] = 1
        graph[k][j] = 1
        ## Compare numbers of n-cycles and, if there is a disparity, record oriented edge in appropriate list:
        new_cycles = count_cycles(graph,d)
        if new_cycles[0] != cycle_list[0]:
            threecycle_list.append([edge[0]+1,edge[1]+1])
        if new_cycles[1] != cycle_list[1]:
            fourcycle_list.append([edge[0]+1,edge[1]+1])
        if new_cycles[2] != cycle_list[2]:
            fivecycle_list.append([edge[0]+1,edge[1]+1])

## Print lists of oriented edges that change the number of n-cycles:
print("Numbers of n-Cycles in Original Graph:")
print(cycle_list)
print("Edges altering number of 3-cycles:") 
print(threecycle_list)
print("Count of 3-cycle list:")
print(len(threecycle_list))
print("Edges altering number of 4-cycles:")
print(fourcycle_list)
print("Count of 4-cycle list:")
print(len(fourcycle_list))
print("Edges altering number of 5-cycles:")
print(fivecycle_list)
print("Count of 5-cycle list:")
print(len(fivecycle_list))
